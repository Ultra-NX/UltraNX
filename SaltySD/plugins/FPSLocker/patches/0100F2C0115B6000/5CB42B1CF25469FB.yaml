# The Legend of Zelda: Tears of The Kingdom 1.4.2
# BID: 5CB42B1CF25469FB

Addons:
  - atmosphere/contents/0100F2C0115B6000/exefs/main.npdm

unsafeCheck: true

MASTER_WRITE:
  # Remove double buffer
  ## REF: A0 2A 40 F9 61 A2 40 39
  -
    type: asm_a64
    main_offset: 0xBBF258
    instructions: [
      [mov, w1, 1]
    ]
  # Code Injected, $x1 + 0xD8 - last frametime without compensation long ticks, $x0 + 0x50 - fps target used for calculation int,
  # $x0 + 0x24 - our fps target used for calculation but as float, originally is stored there 30 FPS int that seems to do nothing outside of this function
  ## MAIN + 0x3ACCFFC = FPS target for reference
  ## REF: nvnWindowSetPresentInterval
  - 
    type: asm_a64
    main_offset: 0x2D4E68
    instructions: [
      [adrp, x2, 0x3acc000],
      [ldr, s9, [x2, 0xffc]],
      [mov, x20, x0],
      [mov, x21, x1],
      [ldr, x0, [x1, 0xd8]],
      [bl, 0x2ba4830], # BL nn::os::ConvertToTimeSpan(nn::os::Tick)
      [mov, w2, 0xca00],
      [movk, w2, 0x3b9a, 16],
      [scvtf, s2, w2],
      [scvtf, s1, x0],
      [fdiv, s1, s2, s1],
      [fcmp, s1, s9],
      [fcsel, s1, s9, s1, gt],
      [fmov, s9, 15.0],
      [fcmp, s1, s9],
      [fcsel, s1, s9, s1, lt],
      [fcvtzu, w2, s1],
      [str, w2, [x20, 0x50]],
      [str, s1, [x20, 0x24]],
      [b, 0x2d4f60]
    ]
  ## Use our fps target
  ## REF: 60 52 42 BD 08 4E A8 52
  ### Replace LDR S0, [X22,#0x250]
  -
    type: asm_a64
    main_offset: 0x2D4730
    instructions: [
      [ldr, s0, [x19, 0x224]]
    ]
  ### Replace SCVTF S0, S0
  -
    type: asm_a64
    main_offset: 0x2D4748
    instructions: [
      [nop]
    ]
  ## REF: 14 01 40 F9 08 4E A8 52
  ### Replace LDR S0, [X22,#0x250]
  -
    type: asm_a64
    main_offset: 0x37EA5C
    instructions: [
      [ldr, s0, [x22, 0x224]]
    ]
  ### Replace SCVTF S0, S0
  -
    type: asm_a64
    main_offset: 0x37EA68
    instructions: [
      [nop]
    ]
  # When prerendered cutscene is active write flag to MAIN + 0x3ACCFFB
  ## REF: 68 52 40 79 08 01 19 32 68 52 00 79
  ## BL to Code Cave 1
  -
    type: asm_a64
    main_offset: 0x2B238B4
    instructions: [
      [bl, 0x2d4eb8]
    ]
  ## REF: 68 52 40 79 08 79 18 12 68 52 00 79, inside call
  ## B to Code Cave 2
  -
    type: asm_a64
    main_offset: 0x2B210CC
    instructions: [
      [b, 0x2d4ec8]
    ]
  ## CODE CAVE 1, offset +0x50 relative to start of previous code cave 
  -
    type: asm_a64
    main_offset: 0x2D4EB8
    instructions: [
      [mov, w2, 1],
      [adrp, x3, 0x3acc000],
      [strb, w2, [x3, 0xffb]],
      [b, 0x5f888] # Jump to original BL as B
    ]
  ## CODE CAVE 2, offset +0x10 relative to start of previous code cave
  -
    type: asm_a64
    main_offset: 0x2D4EC8
    instructions: [
      [adrp, x3, 0x3acc000],
      [strb, w0, [x3, 0xffb]],
      [b, 0x2ba5e80] # B nn::oe::SetUserInactivityDetectionTimeExtended(bool)
    ]
  # Adjust DR timing to factor from MAIN + 0x3ACCFF4
  # REF: 88 02 15 CB 00 01 23 9E
  -
    type: asm_a64
    main_offset: 0xEED54
    instructions: [
      [adrp, x8, 0x3acc000],
      [ldr, s1, [x8, 0xff4]]
    ]
  # Fix black background for D-pad menu
  ## REF: 21 03 5E BC
  -
    type: asm_a64
    main_offset: 0x387390
    instructions: [
      [b, 0x2d4ed4], # Jump to Code Cave 3
      [fcmp, s0, 0.0]
    ]
  ## CODE CAVE 3, offset +0xC relative to start of previous code cave
  -
    type: asm_a64
    main_offset: 0x2D4ED4
    instructions: [
      [fcmp, s1, 0.0],
      [b.ne, +32],
      [ldurh, w8, [x25, -6]],
      [cmp, w8, 5],
      [b.ne, +20],
      [ldurh, w8, [x25, -8]],
      [cmp, w8, 5],
      [b.ne, +8],
      [fmov, s8, 1.0],
      [fmadd, s9, s0, s8, s1],
      [b, 0x387394] # Go back
    ]
  # Default values
  ## FPS Target
  -
    type: bytes
    main_offset: 0x3ACCFFC
    value_type: float
    value: 30
  ## Cutscene flag
  -
    type: bytes
    main_offset: 0x3ACCFFB
    value_type: uint8
    value: 0
  ## Dynamic Resolution timing factor
  -
    type: bytes
    main_offset: 0x3ACCFF4
    value_type: float
    value: 0.001
ALL_FPS:
  -
    type: evaluate_write
    address: [MAIN, 0x3ACCFFC]
    value_type: float
    value: FPS_TARGET
  -
    type: evaluate_write
    address: [MAIN, 0x3ACCFF4]
    value_type: float
    value: "0.001 * (FPS_TARGET / 30)"
  -
    type: compare
    compare_address: [MAIN, 0x3ACCFFB]
    compare_value_type: uint8
    compare_value: 1
    compare_type: "=="
    address: [MAIN]
    value_type: refresh_rate
    value: 30
