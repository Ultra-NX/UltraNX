# The Legend of Zelda: Breath of the Wild 1.8.2
# BID: DE0B6AC4EFC1DDA7

unsafeCheck: true

MASTER_WRITE:
  # Remove double buffer
  ## REF: 61 F6 42 39
  -
    type: asm_a64
    main_offset: 0xD80748
    instructions: [
      [mov, w1, 1]
    ]
  # Change pointer of time factor for DR calculations to MAIN + 0x1D36FF4
  ## REF: 01 01 27 1E 08 59 A8 52 03 08 21 1E, replace hardcoded 100.0 float
  -
    type: asm_a64
    main_offset: 0x1153314
    instructions: [
      [adrp, x8, 0x1d36000],
      [fmul, s3, s0, s1],
      [ldr, s1, [x8, 0xff4]]
    ]
  # Dynamic speed
  ## Replace nvnQueuePresentTexture call to code cave at MAIN+0x148D964
  -
    type: asm_a64
    main_offset: 0xD874FC
    instructions: [
      [b, 0x148d964]
    ]
  ## Patch game speed function to use speed from MAIN+0x1D36FF0
  -
    type: asm_a64
    main_offset: 0x14092A8
    instructions: [
      [b, 0x14092b4]
    ]
  -
    type: asm_a64
    main_offset: 0x14092CC
    instructions: [
      [adrp, x9, 0x1d36000],
      [ldr, s1, [x9, 0xff0]]
    ]
  ## Patch UI speed function to use speeed from MAIN+0x1D36FF0
  -
    type: asm_a64
    main_offset: 0x116D0D8
    instructions: [
      [adrp, x7, 0x1d36000]
    ]
  -
    type: asm_a64
    main_offset: 0x116D0E4
    instructions: [
      [ldr, s0, [x7, 0xff0]]
    ]
  ## CODE CAVE
  -
    type: asm_a64
    main_offset: 0x148D964
    instructions: [
      [blr, x8],
      [mrs, x2, cntpct_el0],
      [adrp, x8, 0x1d36000],
      [ldr, x1, [x8, 0xff8]],
      [cmp, x1, xzr],
      [b.ne, 0x148d984],
      [str, x2, [x8, 0xff8]],
      [b, 0xd87500],
      [sub, x0, x2, x1],
      [bl, 0x148c860], # BL nn::os::ConvertToTimeSpan(nn::os::Tick)
      [ucvtf, s0, x0],
      [mov, w0, 0xa055],
      [movk, w0, 0x1fc, 16],
      [ucvtf, s1, w0],
      [fdiv, s0, s0, s1],
      [fmov, s1, 2.0],
      [fcmp, s0, s1],
      [b.lt, 0x148d9b0],
      [fmov, s0, s1],
      [adrp, x8, 0x1d36000],
      [ldr, s1, [x8, 0xfec]],
      [fcmp, s0, s1],
      [b.gt, 0x148d9c4],
      [fmov, s0, s1],
      [str, s0, [x8, 0xff0]],
      [b, 0x148d97c],
      [adrp, x0, 0x1d36000],
      [ldr, w0, [x0, 0xff0]],
      [ret],
      [adrp, x7, 0x1d36000],
      [str, w1, [x7, 0xfe8]],
      [b, 0xbf7f78]
    ]
  # Signal Cutscenes playing
  -
    type: asm_a64
    main_offset: 0xC00680
    instructions: [
      [bl, 0x148d9d8]
    ]
  -
    type: asm_a64
    main_offset: 0xC00E40
    instructions: [
      [bl, 0x148d9d8]
    ]
  # Default speed
  -
    type: bytes
    main_offset: 0x1D36FF0
    value_type: float
    value: 1.0
  -
    type: bytes
    main_offset: 0x1D36FEC
    value_type: float
    value: 1.0
  # Default cutscene state
  -
    type: bytes
    main_offset: 0x1D36FE8
    value_type: uint8
    value: 1
  # Default DR factor
  -
    type: bytes
    main_offset: 0x1D36FF4
    value_type: float
    value: 100.0
ALL_FPS:
  # Scrolling speed
  ## REF: 68 16 41 B9 D8 22 D5 1A
  ## ADRP + LDR above it
  -
    type: evaluate_write
    address: [MAIN, 0x1C4BA40]
    value_type: float
    value: "30 / FPS_TARGET"
  # Min Delta
  -
    type: evaluate_write
    address: [MAIN, 0x1D36FEC]
    value_type: float
    value: "30 / FPS_TARGET"
  # DR factor
  -
    type: evaluate_write
    address: [MAIN, 0x1D36FF4]
    value_type: float
    value: "(FPS_TARGET / 30) * 100"
  # Prerendered cutscenes must be played at 30 FPS
  -
    type: compare
    compare_address: [MAIN, 0x1D36FE8]
    compare_type: "=="
    compare_value_type: uint8
    compare_value: 0
    address: [MAIN]
    value_type: refresh_rate
    value: 30
